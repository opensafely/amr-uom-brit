library(Shiny)
library(shiny)
install.packages(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server=server)
library(shiny)
> ui <- fluidPage()
>
> server <- function(input, output) {}
> shinyApp(ui = ui, server=server)
library(shiny)
ui <- fluidPage()
server <- function(input, output) {}
shinyApp(ui = ui, server=server)
library(shiny)
ui <- fluidPage("Hello")
server <- function(input, output) {}
shinyApp(ui = ui, server=server)
ui <- fluidPage("Hello")
server <- function(input, output) {}
shinyApp(ui = ui, server=server)
library(shiny)
ui <- fluidPage("Hello")
server <- function(input, output) {}
shinyApp(ui = ui, server=server)
library(shiny)
ui <- fluidPage("Hello")
server <- function(input, output) {}
shinyApp(ui = ui, server=server)
library(shiny)
ui <- fluidPage(
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot(({hist(rnorm(input$num))}))
}
shinyApp(ui = ui, server=server)
install.packages("CaseBasedReasoning")
install.packages("CaseBasedReasoning")
install.packages("devtools")
devtools::install_github("sipemu/case-based-reasoning")
install.packages("CaseBasedReasoning")
library(CaseBasedReasoning)
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
library(survival)
library(CaseBasedReasoning)
av <- available.packages(filters=list())
av[av[, "CaseBasedReasoning"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == CaseBasedReasoning, ]
av[av[, "CaseBasedReasoning"] == pkg, ]
av[av[, "Package"] == pkg, ]
av <- available.packages(filters=list())
av[av[, "Package"] == CaseBasedReasoning, ]
av[av[, "Package"] == "CaseBasedReasoning", ]
av <- available.packages(filters=list())
av[av[, "Package"] == "CaseBasedReasoning", ]
install.packages("CaseBasedReasoning", dependencies = TRUE)
library(remotes)
install_github("cran/CaseBasedReasoning")
library(CaseBasedReasoning)
library(CaseBasedReasoning)
install_github("cran/CaseBasedReasoning")
library(CaseBasedReasoning)
install_github("CaseBasedReasoning")
install_version("CaseBasedReasoning", "0.1")
install_version("CaseBasedReasoning", "0.1")
library(tidyverse)
library(survival)
library(CaseBasedReasoning)
library(remotes)
install_version("CaseBasedReasoning", "0.1")
install.packages("C:/Users/m84300af/OneDrive - Queen Mary, University of London/Desktop/CaseBasedReasoning_0.1.tar.gz", repos = NULL, type = "source")
library(CaseBasedReasoning)
download.file('https://cran.r-project.org/src/contrib/Archive/CaseBasedReasoning/CaseBasedReasoning_0.1.tar.gz',
f <- tempfile())
unzip(f, exdir=tempdir())
load(file.path(tempdir(), '.RData'))
download.file('https://cran.r-project.org/src/contrib/Archive/CaseBasedReasoning/CaseBasedReasoning_0.1.tar.gz', f <- tempfile())
unzip(f, exdir=tempdir())
install.packages("C:/Users/m84300af/OneDrive - Queen Mary, University of London/Desktop/CaseBasedReasoning_0.1.tar.gz", repos = NULL, type = "source")
setwd("~/")
install.packages("survivalROC")
.libPaths( c( "~/C:\Users\m84300af\AppData\Local\Temp\RtmpcrzgLH\downloaded_packages" , .libPaths() ) )
.libPaths( c( "~/userLibrary" , .libPaths() ) )
.libPaths( c( .libPaths(), "~/userLibrary") )
help(.libPaths)
setwd("C:/Users/m84300af/OneDrive - The University of Manchester/Documents/GitHub/amr-uom-brit")
