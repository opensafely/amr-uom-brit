version: '3.0'

expectations:
  population_size: 1000

actions:

# study cohort
#Update to 2022
  generate_study_population_covid_primarycare: 
    run: cohortextractor:latest generate_cohort --study-definition study_definition_covid_primarycare
    outputs:
      highly_sensitive:
        cohort: output/input_covid_primarycare.csv
  
  generate_study_population_covid_SGSS:
    run: cohortextractor:latest generate_cohort --study-definition study_definition_covid_SGSS
    outputs:
      highly_sensitive:
        cohort: output/input_covid_SGSS.csv

  generate_study_population_covid_admission: 
    run: cohortextractor:latest generate_cohort --study-definition study_definition_covid_admission
    outputs:
      highly_sensitive:
        cohort: output/input_covid_admission.csv

# matching
  pre_matching: # filter incident cases # filter antibiotics 
    run: r:latest -e 'rmarkdown::render("analysis/matching/pre_matching.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [generate_study_population_covid_primarycare, generate_study_population_covid_SGSS,generate_study_population_covid_admission]
    outputs:
      highly_sensitive:
        csv1: output/case_covid_hosp.csv 
        csv2: output/control_covid_infection.csv 
      moderately_sensitive:
        html:  output/pre_matching.html



# # RF before matching
#   RF_ranger_unmatched: 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_ranger_unmatched.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_matching]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_ranger_unmatched.html
#       highly_sensitive:
#         rds1: output/development_ranger.rds 
#         rds2: output/validation_ranger.rds 
#         rds3: output/RF_model_ranger.rds 
#         rds4: output/development_ranger_1control.rds 




  matching: #R MatchIt  matching with replacement
    run: r:latest -e 'rmarkdown::render("analysis/matching/matching.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [pre_matching]
    outputs:
      moderately_sensitive:
        html: output/matching.html
      highly_sensitive: 
        rds1: output/matched_patients.rds
        rds2: output/unmatched_cases.rds
        csv: output/matched_patients_id.csv # unique patient ID
        
  check_unmatched:
    run: r:latest -e 'rmarkdown::render("analysis/matching/check_unmatched.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [matching]
    outputs:
      moderately_sensitive:
        html: output/check_unmatched.html

# extract
  extract_variables: # confounders # ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_outcome --with-end-date-fix
    needs: [matching]
    outputs:
      highly_sensitive:
        cohort: output/input_outcome.csv

  process_Rmatching: # confounders # ab exposure
    run: r:latest analysis/process/process_Rmatching.R
    needs: [extract_variables,matching]
    outputs:
      highly_sensitive:
        cohort1: output/matched_outcome.csv
        cohort2: output/matched_outcome_check.rds # filter died & de-regist again
        rds1: output/abtype79.rds
        rds2: output/comor17.rds

  extract_variables_ab_time:   # per ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_time --with-end-date-fix # unique matched patient ID
    needs: [matching]
    outputs:
      highly_sensitive:
        cohort: output/input_ab_time.csv

  process_ab_time: # exposures #merge ab time with mathced patients
    run: r:latest -e 'rmarkdown::render("analysis/process/process_ab_time.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [extract_variables_ab_time,process_Rmatching]
    outputs:
      moderately_sensitive:
        html: output/process_ab_time.html
      highly_sensitive: 
         rds: output/matched_ab.rds

# RF
  pre_RF_process: # split train and valid set # create category variables of ab exposure
    run: r:latest -e 'rmarkdown::render("analysis/RF/pre_RF_process.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [process_ab_time,process_Rmatching]
    outputs:
      moderately_sensitive:
        html: output/pre_RF_process.html
      highly_sensitive: 
        rds1: output/train.rds
        rds2: output/valid.rds
        rds3: output/train_cat.rds
        rds4: output/valid_cat.rds 

  RF_multi_ranger: 
    run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [pre_RF_process]
    outputs:
      moderately_sensitive:
        html: output/RF_multi_ranger.html
      highly_sensitive:
        rds1: output/development_ranger.rds 
        rds2: output/validation_ranger.rds 
        rds3: output/RF_model_ranger.rds 
      #  rds4: output/development_ranger_1control.rds 

  model_ranger: # coditional logistic regression for decile groups
    run: r:latest -e 'rmarkdown::render("analysis/model/model_ranger.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger]
    outputs:
      moderately_sensitive:
        html: output/model_ranger.html  

  model_colgit_all: # coditional logistic regression 
    run: r:latest -e 'rmarkdown::render("analysis/model/model_clogit_all.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger]
    outputs:
      moderately_sensitive:
        html: output/model_clogit_all.html  

  check_RF_ranger: # ROC, calibration 
    run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger,pre_RF_process]
    outputs:
      moderately_sensitive:
        html: output/check_RF_ranger.html    
#   # model_clogit: # coditional logistic regression for picking exposure variables 
#   #   run: r:latest -e 'rmarkdown::render("analysis/RF/model_clogit.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#   #   needs: [pre_RF_process]
#   #   outputs:
#   #     moderately_sensitive:
#   #       html: output/model_clogit.html
  
#   check_clogit: # coditional logistic regression for picking exposure variables  # category & continuous
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_clogit.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_clogit.html

#   # classification_tree:  #decision tree check # category  
#   #   run: r:latest -e 'rmarkdown::render("analysis/classification_tree.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#   #   needs: [model_clogit]
#   #   outputs:
#   #     moderately_sensitive:
#   #       html: output/classification_tree.html

#   classification_tree:  #decision tree check # category 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/classification_tree.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/classification_tree.html

#   classification_tree_1control:  #decision tree check # category 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/classification_tree_1control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/classification_tree_1control.html

#   # classification_tree_all:  #decision tree check # category #all predictor
#   #   run: r:latest -e 'rmarkdown::render("analysis/RF/classification_tree_all.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#   #   needs: [model_clogit]
#   #   outputs:
#   #     moderately_sensitive:
#   #       html: output/classification_tree_all.html

#   # classification_tree_ind_rpart:  #decision tree check # category #per predictor
#   #   run: r:latest -e 'rmarkdown::render("analysis/classification_tree_ind_rpart.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#   #   needs: [model_clogit]
#   #   outputs:
#   #     moderately_sensitive:
#   #       html: output/classification_tree_ind_rpart.html

#   RF_uni: # category # individual variables
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_uni.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_uni.html
  
#   RF_multi: 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_multi.html
#       highly_sensitive:
#         rds1: output/development.rds 
#         rds2: output/validation.rds 
#         rds3: output/RF_model.rds 
#      #   rds5: output/development_1control.rds 


# # final model
#   model: # coditional logistic regression for decile groups
#     run: r:latest -e 'rmarkdown::render("analysis/model/model.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi]
#     outputs:
#       moderately_sensitive:
#         html: output/model.html
#         rds1: output/model.rds
#         rds2: output/model_adj.rds
#         rds3: output/model_adj_all.rds




##### COVID hospital admission
# matching
  pre_matching_hosp: # filter incident cases # filter antibiotics 
    run: r:latest -e 'rmarkdown::render("analysis/matching/pre_matching_hosp.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [generate_study_population_covid_admission]
    outputs:
      highly_sensitive:
        csv1: output/case_covid_icu_death.csv
        csv2: output/control_covid_hosp.csv
      moderately_sensitive:
        html:  output/pre_matching_hosp.html

  matching_hosp: #R MatchIt  matching with replacement
    run: r:latest -e 'rmarkdown::render("analysis/matching/matching_hosp.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [pre_matching_hosp]
    outputs:
      moderately_sensitive:
        html: output/matching_hosp.html
      highly_sensitive: 
        rds1: output/matched_patients_hosp.rds
        rds2: output/unmatched_cases_hosp.rds
        csv: output/matched_patients_id_hosp.csv # unique patient ID

  check_unmatched_hosp:
    run: r:latest -e 'rmarkdown::render("analysis/matching/check_unmatched_hosp.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [matching_hosp]
    outputs:
      moderately_sensitive:
        html: output/check_unmatched_hosp.html

# extract
  extract_variables_hosp: # confounders # ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_outcome_hosp --with-end-date-fix
    needs: [matching_hosp]
    outputs:
      highly_sensitive:
        cohort: output/input_outcome_hosp.csv

  process_Rmatching_hosp: # confounders # ab exposure
    run: r:latest analysis/process/process_Rmatching_hosp.R
    needs: [extract_variables_hosp,matching_hosp]
    outputs:
      highly_sensitive:
        cohort1: output/matched_outcome_hosp.rds
        cohort2: output/matched_outcome_check_hosp.rds # filter died & de-regist again
        rds1: output/abtype79_hosp.rds
        rds2: output/comor17_hosp.rds

  extract_variables_ab_time_hosp:   # per ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_time_hosp --with-end-date-fix # unique matched patient ID
    needs: [matching_hosp]
    outputs:
      highly_sensitive:
        cohort: output/input_ab_time_hosp.csv

  process_ab_time_hosp: # exposures #merge ab time with mathced patients
    run: r:latest -e 'rmarkdown::render("analysis/process/process_ab_time_hosp.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [extract_variables_ab_time_hosp,process_Rmatching_hosp]
    outputs:
      moderately_sensitive:
        html: output/process_ab_time_hosp.html
      highly_sensitive: 
         rds: output/matched_ab_hosp.rds

# RF
  pre_RF_process_hosp: # split train and valid set # create category variables of ab exposure
    run: r:latest -e 'rmarkdown::render("analysis/RF/pre_RF_process_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [process_ab_time_hosp,process_Rmatching_hosp]
    outputs:
      moderately_sensitive:
        html: output/pre_RF_process_hosp.html
      highly_sensitive: 
        rds1: output/train_hosp.rds
        rds2: output/valid_hosp.rds
        rds3: output/train_cat_hosp.rds
        rds4: output/valid_cat_hosp.rds 

  # model_clogit_hosp: # coditional logistic regression for picking exposure variables 
  #   run: r:latest -e 'rmarkdown::render("analysis/RF/model_clogit_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [pre_RF_process_hosp]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/model_clogit_hosp.html

  # classification_tree_hosp:  #decision tree check # category 
  #   run: r:latest -e 'rmarkdown::render("analysis/RF/classification_tree_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [pre_RF_process_hosp]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/classification_tree_hosp.html        

  # RF_uni_hosp: # category # individual variables
  #   run: r:latest -e 'rmarkdown::render("analysis/RF/RF_uni_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [pre_RF_process_hosp]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/RF_uni_hosp.html

  # RF_multi_hosp: 
  #   run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [pre_RF_process_hosp]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/RF_multi_hosp.html
  #     highly_sensitive:
  #       rds1: output/development_hosp.rds 
  #       rds2: output/validation_hosp.rds 
  #       rds3: output/RF_model_hosp.rds 
  #       rds4: output/development_1control_hosp.rds 

  # model_hosp: # coditional logistic regression for decile groups
  #   run: r:latest -e 'rmarkdown::render("analysis/model/model_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi_hosp]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/model_hosp.html  
  #       rds1: output/model_hosp.rds
  #       rds2: output/model_adj_hosp.rds
  #       rds3: output/model_adj_all_hosp.rds

# ramger hosp
  RF_multi_ranger_hosp: 
    run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [pre_RF_process_hosp]
    outputs:
      moderately_sensitive:
        html: output/RF_multi_ranger_hosp.html
      highly_sensitive:
        rds1: output/development_ranger_hosp.rds 
        rds2: output/validation_ranger_hosp.rds 
        rds3: output/RF_model_ranger_hosp.rds 
      #  rds4: output/development_ranger_1control.rds 


  model_ranger_hosp: # coditional logistic regression for decile groups
    run: r:latest -e 'rmarkdown::render("analysis/model/model_ranger_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger_hosp]
    outputs:
      moderately_sensitive:
        html: output/model_ranger_hosp.html  

#   model_colgit_all: # coditional logistic regression 
#     run: r:latest -e 'rmarkdown::render("analysis/model/model_clogit_all.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger]
#     outputs:
#       moderately_sensitive:
#         html: output/model_clogit_all.html  

  check_RF_ranger_hosp: # ROC, calibration 
    run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger_hosp,pre_RF_process_hosp]
    outputs:
      moderately_sensitive:
        html: output/check_RF_ranger_hosp.html   

  RF_ranger_decile_hosp: # RF model to all data
    run: r:latest -e 'rmarkdown::render("analysis/RF/RF_ranger_decile_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger_hosp]
    outputs:
      moderately_sensitive:
        html: output/RF_ranger_decile_hosp.html 
      highly_sensitive:
        rds1: output/all_ranger_hosp.rds 

  check_RF_descript_ranger_hosp: # descriptive stat
    run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_ranger_decile_hosp,RF_multi_ranger_hosp] #RF_ranger_decil
    outputs:
      moderately_sensitive:
        html: output/check_RF_descript_ranger_hosp.html 
        csv1: output/crosstab_hosp.csv
        csv2: output/factor.range_hosp.csv

  # check_RF_descript_ranger_hosp: # descriptive stat
  #   run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_ranger_decile_hosp,RF_multi_ranger_hosp] #RF_ranger_decil
  #   outputs:
  #     moderately_sensitive:
  #       html: output/check_RF_descript_ranger_hosp.html 
  #       csv1: output/crosstab_hosp.csv
  #       csv2: output/factor.range_hosp.csv




# # performance check
#   check_RF: # ROC, calibration
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi,pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF.html      

#   check_RF_1control: # ROC, calibration
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_1control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi,pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_1control.html    

 

  # check_logistic: # compared with logistic model
  #   run: r:latest -e 'rmarkdown::render("analysis/check/check_logistic.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi,pre_RF_process]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/check_logistic.html
  #     highly_sensitive:
  #       rds1: output/development_logi.rds 
  #       rds2: output/validation_logi.rds          

  # check_RF_descript: # descriptive stat
  #   run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/check_RF_descript.html   

  # check_RF_hosp: # ROC, calibration
  #   run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi_hosp,pre_RF_process_hosp]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/check_RF_hosp.html      

  # check_RF_descript_hosp: # descriptive stat
  #   run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_hosp.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi_hosp]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/check_RF_descript_hosp.html   


# sensitivity analysis: clogist result comparison 
  process_outlier: # remove outlier # check quintile group
    run: r:latest -e 'rmarkdown::render("analysis/process/process_outlier.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [process_Rmatching,process_Rmatching_hosp]
    outputs:
      moderately_sensitive:
        html: output/process_outlier.html 
      highly_sensitive:
      #  cohort1: output/study_1.rds #covid infection
        cohort2: output/study_2.rds #covid hospital admission
        cohort3: output/study_3.rds #covid death

  model_colgit_crude: # coditional logistic regression 
    run: r:latest -e 'rmarkdown::render("analysis/model/model_clogit_crude.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [process_outlier]
    outputs:
      moderately_sensitive:
        html: output/model_clogit_crude.html  



  RF_multi_ranger_0.5: # compare to RandomForest package as long vectors are not supported
    run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger_0.5.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [pre_RF_process]
    outputs:
      moderately_sensitive:
        html: output/RF_multi_ranger_0.5.html
      highly_sensitive:
        rds1: output/development_ranger_0.5.rds 
        rds2: output/validation_ranger_0.5.rds 
        rds3: output/RF_model_ranger_0.5.rds 
      #  rds4: output/development_ranger_1control.rds 

  check_RF_ranger_0.5: # ROC, calibration 
    run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_0.5.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger_0.5,pre_RF_process]
    outputs:
      moderately_sensitive:
        html: output/check_RF_ranger_0.5.html    

  


  # check_RF_ranger_1control: # ROC, calibration #random 1 control
  #   run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_1control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi_ranger,pre_RF_process]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/check_RF_ranger_1control.html 


#RF_shap: # Shapley values
  #   run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi_ranger]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/check_RF_descript_ranger.html 
  
  RF_ranger_decile: # RF model to all data
    run: r:latest -e 'rmarkdown::render("analysis/RF/RF_ranger_decile.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger]
    outputs:
      moderately_sensitive:
        html: output/RF_ranger_decile.html 
      highly_sensitive:
        rds1: output/all_ranger.rds 


  check_RF_descript_ranger: # descriptive stat
    run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_ranger_decile,RF_multi_ranger] #RF_ranger_decil
    outputs:
      moderately_sensitive:
        html: output/check_RF_descript_ranger.html 
        csv1: output/crosstab.csv
        csv2: output/factor.range.csv


# final model
  model_ranger_final: # coditional logistic regression for decile groups
    run: r:latest -e 'rmarkdown::render("analysis/model/model_ranger_final.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_ranger_decile]
    outputs:
      moderately_sensitive:
        html: output/model_ranger_final.html

# # ranger 1:1 sample

#   RF_multi_ranger_1: 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger_1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_multi_ranger_1.html
#       highly_sensitive:
#         rds1: output/development_ranger_1.rds 
#         rds2: output/validation_ranger_1.rds 
#         rds3: output/RF_model_ranger_1.rds 

#   model_ranger_1: # coditional logistic regression for decile groups
#     run: r:latest -e 'rmarkdown::render("analysis/model/model_ranger_1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_1]
#     outputs:
#       moderately_sensitive:
#         html: output/model_ranger_1.html  

#   check_RF_ranger_1: # ROC, calibration 
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_1,pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_ranger_1.html    

#   check_RF_descript_ranger_1: # descriptive stat
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger_1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_1]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_descript_ranger_1.html 



# # ranger 1:2 sample

#   RF_multi_ranger_2: 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger_2.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_multi_ranger_2.html
#       highly_sensitive:
#         rds1: output/development_ranger_2.rds 
#         rds2: output/validation_ranger_2.rds 
#         rds3: output/RF_model_ranger_2.rds 

#   model_ranger_2: # coditional logistic regression for decile groups
#     run: r:latest -e 'rmarkdown::render("analysis/model/model_ranger_2.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_2]
#     outputs:
#       moderately_sensitive:
#         html: output/model_ranger_2.html  

#   check_RF_ranger_2: # ROC, calibration 
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_2.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_2,pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_ranger_2.html    

#   check_RF_descript_ranger_2: # descriptive stat
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger_2.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_2]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_descript_ranger_2.html 


# # ranger 1:3 sample

#   RF_multi_ranger_3: 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger_3.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_multi_ranger_3.html
#       highly_sensitive:
#         rds1: output/development_ranger_3.rds 
#         rds2: output/validation_ranger_3.rds 
#         rds3: output/RF_model_ranger_3.rds 

#   model_ranger_3: # coditional logistic regression for decile groups
#     run: r:latest -e 'rmarkdown::render("analysis/model/model_ranger_3.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_3]
#     outputs:
#       moderately_sensitive:
#         html: output/model_ranger_3.html  

#   check_RF_ranger_3: # ROC, calibration 
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_3.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_3,pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_ranger_3.html    

#   check_RF_descript_ranger_3: # descriptive stat
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger_3.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_3]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_descript_ranger_3.html 


# # ranger 1:5 sample

#   RF_multi_ranger_5: 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger_5.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_multi_ranger_5.html
#       highly_sensitive:
#         rds1: output/development_ranger_5.rds 
#         rds2: output/validation_ranger_5.rds 
#         rds3: output/RF_model_ranger_5.rds 

#   model_ranger_5: # coditional logistic regression for decile groups
#     run: r:latest -e 'rmarkdown::render("analysis/model/model_ranger_5.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_5]
#     outputs:
#       moderately_sensitive:
#         html: output/model_ranger_5.html  

#   check_RF_ranger_5: # ROC, calibration 
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_5.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_5,pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_ranger_5.html    

#   check_RF_descript_ranger_5: # descriptive stat
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_descript_ranger_5.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [RF_multi_ranger_5]
#     outputs:
#       moderately_sensitive:
#         html: output/check_RF_descript_ranger_5.html 

# # python RF
#   pre_generate_notebook_RF: # rds to csv
#     run: r:latest -e 'rmarkdown::render("analysis/RF/pre_generate_notebook_RF.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [process_ab_time,process_Rmatching]
#     outputs:
#       moderately_sensitive:
#         html: output/pre_generate_notebook_RF.html
#       highly_sensitive: 
#         csv1: output/train_cat.csv
#         csv2: output/valid_cat.csv
#         csv3: output/train.csv
#         csv4: output/valid.csv

#   generate_notebook_RF:
#     run: jupyter:latest jupyter nbconvert /workspace/analysis/RF/RF.ipynb --execute --to html --output-dir=/workspace/output --ExecutePreprocessor.timeout=86400
#     needs: [pre_generate_notebook_RF]
#     outputs:
#       moderately_sensitive:
#         notebook: output/RF.html 
        
  # prob_decile: # check prob dist
  #   run: r:latest -e 'rmarkdown::render("analysis/RF/prob_decile.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
  #   needs: [RF_multi]
  #   outputs:
  #     moderately_sensitive:
  #       html: output/prob_decile.html 


## 1:1 matching

  matching_ratio1: #R MatchIt  matching with replacement
    run: r:latest -e 'rmarkdown::render("analysis/matching/matching_ratio1.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [pre_matching]
    outputs:
      moderately_sensitive:
        html: output/matching_ratio1.html
      highly_sensitive: 
        rds1: output/matched_patients_ratio1.rds
        rds2: output/unmatched_cases_ratio1.rds
        csv: output/matched_patients_id_ratio1.csv # unique patient ID
        
  check_unmatched_ratio1:
    run: r:latest -e 'rmarkdown::render("analysis/matching/check_unmatched_ratio1.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [matching_ratio1]
    outputs:
      moderately_sensitive:
        html: output/check_unmatched_ratio1.html

# extract
  extract_variables_ratio1: # confounders # ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_outcome_ratio1 --with-end-date-fix
    needs: [matching_ratio1]
    outputs:
      highly_sensitive:
        cohort: output/input_outcome_ratio1.csv

  process_Rmatching_ratio1: # confounders # ab exposure
    run: r:latest analysis/process/process_Rmatching_ratio1.R
    needs: [extract_variables_ratio1,matching_ratio1]
    outputs:
      highly_sensitive:
        cohort1: output/matched_outcome_ratio1.rds
        cohort2: output/matched_outcome_check_ratio1.rds # filter died & de-regist again
      #  rds1: output/abtype_ratio1.rds
        rds2: output/comor17_ratio1.rds

  extract_variables_ab_time_ratio1:   # per ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_time_ratio1 --with-end-date-fix # unique matched patient ID
    needs: [matching_ratio1]
    outputs:
      highly_sensitive:
        cohort: output/input_ab_time_ratio1.csv

  process_ab_time_ratio1: # exposures #merge ab time with mathced patients
    run: r:latest -e 'rmarkdown::render("analysis/process/process_ab_time_ratio1.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [extract_variables_ab_time_ratio1,process_Rmatching_ratio1]
    outputs:
      moderately_sensitive:
        html: output/process_ab_time_ratio1.html
      highly_sensitive: 
         rds: output/matched_ab_ratio1.rds

# RF
  pre_RF_process_ratio1: # split train and valid set # create category variables of ab exposure
    run: r:latest -e 'rmarkdown::render("analysis/RF/pre_RF_process_ratio1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [process_ab_time_ratio1,process_Rmatching_ratio1]
    outputs:
      moderately_sensitive:
        html: output/pre_RF_process_ratio1.html
      highly_sensitive: 
        rds1: output/train_ratio1.rds
        rds2: output/valid_ratio1.rds
        rds3: output/train_cat_ratio1.rds
        rds4: output/valid_cat_ratio1.rds 
      #  rds5: output/abtype_ratio1.rds
  
#   check_clogit: # coditional logistic regression for picking exposure variables  # category & continuous
#     run: r:latest -e 'rmarkdown::render("analysis/check/check_clogit.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/check_clogit.html

#   classification_tree:  #decision tree check # category 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/classification_tree.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/classification_tree.html

#   classification_tree_1control:  #decision tree check # category 
#     run: r:latest -e 'rmarkdown::render("analysis/RF/classification_tree_1control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/classification_tree_1control.html

#   RF_uni: # category # individual variables
#     run: r:latest -e 'rmarkdown::render("analysis/RF/RF_uni.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
#     needs: [pre_RF_process]
#     outputs:
#       moderately_sensitive:
#         html: output/RF_uni.html
  
  RF_multi_ranger_ratio1: 
    run: r:latest -e 'rmarkdown::render("analysis/RF/RF_multi_ranger_ratio1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [pre_RF_process_ratio1]
    outputs:
      moderately_sensitive:
        html: output/RF_multi_ranger_ratio1.html
      highly_sensitive:
        rds1: output/development_ranger_ratio1.rds 
        rds2: output/validation_ranger_ratio1.rds 
        rds3: output/RF_model_ranger_ratio1.rds 
     #   rds5: output/development_1control_ratio1.rds 

  check_RF_ranger_ratio1: # ROC, calibration 
    run: r:latest -e 'rmarkdown::render("analysis/check/check_RF_ranger_ratio1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
    needs: [RF_multi_ranger_ratio1,pre_RF_process_ratio1]
    outputs:
      moderately_sensitive:
        html: output/check_RF_ranger_ratio1.html    





# study cohort (exclude 6wk pt)
#Update to 2022
  generate_study_population_covid_primarycare_2: 
    run: cohortextractor:latest generate_cohort --study-definition study_definition_covid_primarycare_2
    outputs:
      highly_sensitive:
        cohort: output/input_covid_primarycare_2.csv

  generate_study_population_covid_SGSS_2:
    run: cohortextractor:latest generate_cohort --study-definition study_definition_covid_SGSS_2
    outputs:
      highly_sensitive:
        cohort: output/input_covid_SGSS_2.csv

  generate_study_population_covid_admission_2: 
    run: cohortextractor:latest generate_cohort --study-definition study_definition_covid_admission_2
    outputs:
      highly_sensitive:
        cohort: output/input_covid_admission_2.csv

# matching
  pre_matching_2: # filter incident cases # filter antibiotics 
    run: r:latest -e 'rmarkdown::render("analysis/matching/pre_matching_2.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [generate_study_population_covid_primarycare_2, generate_study_population_covid_SGSS_2,generate_study_population_covid_admission_2]
    outputs:
      highly_sensitive:
        csv1: output/case_covid_hosp_2.csv 
        csv2: output/control_covid_infection_2.csv 
      moderately_sensitive:
        html:  output/pre_matching_2.html

  matching_2: #R MatchIt  matching with replacement
    run: r:latest -e 'rmarkdown::render("analysis/matching/matching_2.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [pre_matching_2]
    outputs:
      moderately_sensitive:
        html: output/matching_2.html
      highly_sensitive: 
        rds1: output/matched_patients_2.rds
        rds2: output/unmatched_cases_2.rds
        csv: output/matched_patients_id_2.csv # unique patient ID
        
  check_unmatched_2:
    run: r:latest -e 'rmarkdown::render("analysis/matching/check_unmatched_2.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [matching_2]
    outputs:
      moderately_sensitive:
        html: output/check_unmatched_2.html

# extract
  extract_variables_2: # confounders # ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_outcome_2 --with-end-date-fix
    needs: [matching_2]
    outputs:
      highly_sensitive:
        cohort: output/input_outcome_2.csv

  process_Rmatching_2: # confounders # ab exposure
    run: r:latest analysis/process/process_Rmatching_2.R
    needs: [extract_variables_2,matching_2]
    outputs:
      highly_sensitive:
        cohort1: output/matched_outcome_2.csv
        cohort2: output/matched_outcome_check_2.rds # filter died & de-regist again
        rds1: output/abtype79_2.rds
        rds2: output/comor17_2.rds

  extract_variables_ab_time_2:   # per ab exposure
    run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_time_2 --with-end-date-fix # unique matched patient ID
    needs: [matching_2]
    outputs:
      highly_sensitive:
        cohort: output/input_ab_time_2.csv

  process_ab_time_2: # exposures #merge ab time with mathced patients
    run: r:latest -e 'rmarkdown::render("analysis/process/process_ab_time_2.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
    needs: [extract_variables_ab_time_2,process_Rmatching_2]
    outputs:
      moderately_sensitive:
        html: output/process_ab_time_2.html
      highly_sensitive: 
         rds: output/matched_ab_2.rds


# # #   classification_tree_contd:  #decision tree check # contd
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_tree_contd.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_tree_contd.html

# # #   # model_tuneRF: #mtry, 
# # #   #   run: r:latest -e 'rmarkdown::render("analysis/model_tuneRF.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #   #   needs: [model_RF_process]
# # #   #   outputs:
# # #   #     moderately_sensitive:
# # #   #       html: output/model_tuneRF.html

# # #   # model_RF_training: #
# # #   #   run: r:latest -e 'rmarkdown::render("analysis/model_RF_training.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #   #   needs: [model_RF_process]
# # #   #   outputs:
# # #   #     moderately_sensitive:
# # #   #       html: output/model_RF_training.html

# # #   model_RandomForest: # pick variables for model training # contd
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest.html
# # #   #      csv1: output/var_tree.csv
# # #         rds: output/model_RandomForest.rds

# # #   model_RandomForest_cat: # pick variables for model training # category #6:6
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest_cat.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_clogit]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest_cat.html
# # #       highly_sensitive:
# # #         rds: output/model_RandomForest_cat.rds
# # #         train: output/train_6_cat.rds
# # #         valid: output/valid_6_cat.rds

# # #   model_RandomForest_check_cat: # check performance
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest_check_cat.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RandomForest_cat]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest_check_cat.html

# # #   model_RandomForest_cat_ind: # pick variables for model training # category #6:6 # individual variables
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest_cat_ind.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_clogit]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest_cat_ind.html
  
# # #   model_RandomForest_decile_cat: # create decile groups for probabilities # get counfounders  #6:6
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest_decile_cat.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_clogit,model_RandomForest_cat]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest_decile_cat.html
# # #         rds1: output/development_cat.rds 
# # #         rds2: output/validation_cat.rds 

# # #   model_cat: # coditional logistic regression for decile groups
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_cat.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RandomForest_decile_cat]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_cat.html    

# # #   RF_descriptive_stat_cat: 
# # #     run: r:latest -e 'rmarkdown::render("analysis/RF_descriptive_stat_cat.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RandomForest_decile_cat]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/RF_descriptive_stat_cat.html   
# # #   # model_RF_clust: # use proximity
# # #   #   run: r:latest -e 'rmarkdown::render("analysis/model_RF_clust.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #   #   needs: [model_RF_process]
# # #   #   outputs:
# # #   #     moderately_sensitive:
# # #   #       html: output/model_RF_clust.html
# # #   # #      csv1: output/var_tree.csv
# # #   # #      rds: output/model_RandomForest.rds

# # #   model_RandomForest_check: # check performance
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest_check.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,model_RandomForest]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest_check.html

# # #   model_RandomForest_tree: # check tree
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest_tree.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,model_RandomForest]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest_tree.html

# # #   model_RandomForest_decile: # create decile groups for probabilities # get counfounders
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RandomForest_decile.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,model_RandomForest,process_ab_time,process_Rmatching]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RandomForest_decile.html
# # #         rds1: output/development.rds
# # #         rds2: output/validation.rds

# # #   RF_descriptive_stat: 
# # #     run: r:latest -e 'rmarkdown::render("analysis/RF_descriptive_stat.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RandomForest_decile]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/RF_descriptive_stat.html

# # #   model: # coditional logistic regression for decile groups
# # #     run: r:latest -e 'rmarkdown::render("analysis/model.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RandomForest_decile]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model.html
  


# # #   model_clogit_adjusted: # coditional logistic regression for expo variables
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_clogit_adjusted.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RandomForest_decile,model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_clogit_adjusted.html

# # #   model_logistic: #  logistic regression for expo variables
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_logistic.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RandomForest_decile,model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_logistic.html


# # # ## updated method
# # #   RF_model: # pick variables for model training #distinct # ab users # merge
# # #     run: r:latest -e 'rmarkdown::render("analysis/RF_model.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/RF_model.html
# # #         rds1: output/RF_model.rds
# # #         rds2: output/RF_model_decile.rds

# # #   RF_model_develop: # pick variables for model training #distinct # ab users # development
# # #     run: r:latest -e 'rmarkdown::render("analysis/RF_model_develop.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,RF_model]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/RF_model_develop.html
# # #         rds1: output/RF_model_develop.rds
# # #         rds2: output/RF_model_decile_develop.rds

# # #   RF_model_valid: # pick variables for model training #distinct # ab users # validation
# # #     run: r:latest -e 'rmarkdown::render("analysis/RF_model_valid.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,RF_model_develop]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/RF_model_valid.html
# # #         rds1: output/RF_model_decile_valid.rds

# # #   RF_classification_check: 
# # #     run: r:latest -e 'rmarkdown::render("analysis/RF_classification_check.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,RF_model_develop,RF_model_valid]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/RF_classification_check.html
  
# # #   descriptive_stat: 
# # #     run: r:latest -e 'rmarkdown::render("analysis/descriptive_stat.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,RF_model_develop,RF_model_valid]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/descriptive_stat.html

# # # # # main analysis
 
# # #   table1_round: 
# # #     run: r:latest analysis/table1.R
# # #     needs: [pre_matching,process_Rmatching]
# # #     outputs:
# # #       moderately_sensitive:
# # #         csv1: output/table1_unmatched.csv
# # #         csv2: output/table1_matched.csv
# # #         csv3: output/table1_random.csv

# # #   table2_round: 
# # #     run: r:latest analysis/table2.R
# # #     needs: [process_Rmatching]
# # #     outputs:
# # #       moderately_sensitive:
# # #         csv1: output/table2_matched.csv
# # #         csv3: output/table2_random.csv
  
# # #   table3_round: # baseline table of exposure variables/ training &validation 
# # #     run: r:latest analysis/table3.R
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         csv1: output/table3_train.csv
# # #         csv2: output/table3_valid.csv
# # #         csv3: output/table3_all.csv

# # # # variables check
# # #   check_variables: # check input
# # #     run: r:latest -e 'rmarkdown::render("analysis/check_variables.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/check_variables.html


# # # ###### random 1 control #####
# # #   classification_check: # RF # total_ab #1000trees used to compared with 6controls
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check.html
# # #         rds1: output/train_1control.rds
# # #         rds2: output/valid_1control.rds
  

  
# # #   classification_check_1_control: # RF # all # 1 control
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_1_control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,classification_check]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_1_control.html

# # #   classification_check_6_control: # RF # total_ab #1:6
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_6_control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_6_control.html

# # #   classification_check_logi: #logistic #6 controls 
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_logi.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_logi.html

# # #   classification_check_logi_1_control: #logistic # single control # decile
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_logi_1_control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_logi_1_control.html        

# # # #decile check
# # #   classification_check_logi_1_control_decile: #logistic # single control # total ab decile
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_logi_1_control_decile.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_logi_1_control_decile.html 

# # #   classification_check_1_control_decile: # RF # all # 1 control # total ab decile
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_1_control_decile.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,classification_check]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_1_control_decile.html

# # # # remove outlier
# # #   classification_check_1_control_0.9: # RF # all # 1 control # remove90th outlier
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_1_control_0.9.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,classification_check]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_1_control_0.9.html

# # #   classification_check_logi_1_control_0.9: #logistic # single control remove90th outlier
# # #     run: r:latest -e 'rmarkdown::render("analysis/classification_check_logi_1_control_0.9.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/classification_check_logi_1_control_0.9.html  


# # #   # classification_check_logi_1_decile: #logistic # single control # decile group
# # #   #   run: r:latest -e 'rmarkdown::render("analysis/classification_check_logi_1_control_decile.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #   #   needs: [model_RF_process]
# # #   #   outputs:
# # #   #     moderately_sensitive:
# # #   #       html: output/classification_check_logi_1_control_decile.html     











# # # # distinct  
# # #   model_RF_distinct: # pick variables for model training # distinct patients
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RF_distinct.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RF_distinct.html
# # #         rds: output/model_RF_distinct.rds

# # #   model_RF_distinct_check: 
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RF_distinct_check.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,model_RF_distinct]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RF_distinct_check.html

# # # # random 1 control 
# # #   model_RF_random_1_control: # random pick one control in subclass
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RF_random_1_control.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RF_random_1_control.html
# # #         rds: output/model_RF_random_1_control.rds

# # #   model_RF_random_1_control_check: 
# # #     run: r:latest -e 'rmarkdown::render("analysis/model_RF_random_1_control_check.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # #     needs: [model_RF_process,model_RF_random_1_control]
# # #     outputs:
# # #       moderately_sensitive:
# # #         html: output/model_RF_random_1_control_check.html


# # # #   #######
# # # #   model_tuneRF: #
# # # #     run: r:latest -e 'rmarkdown::render("analysis/model_tuneRF.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [model_RF_process]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/model_tuneRF.html

# # # #   check_ab_time:  
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_ab_time.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
# # # #     needs: [process_ab_time]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_ab_time.html
# # # #       # highly_sensitive: 
# # # #       #   rds: output/matched_patients_monthly_ab.rds


# # # #   check_RF_grid: 
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_RF_grid.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [process_ab_time]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_RF_grid.html

# # # #   check_RF: 
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_RF.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [process_ab_time]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_RF.html

# # # #   model_RF: 
# # # #     run: r:latest -e 'rmarkdown::render("analysis/model_RF.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [process_ab_time]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/model_RF.html

# # # #   model_RF_process_subclass: # random sampling by subclass
# # # #     run: r:latest -e 'rmarkdown::render("analysis/model_RF_process_subclass.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [process_ab_time]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/model_RF_process_subclass.html

# # # #   model_RF_process_check_sample: # check sample method
# # # #     run: r:latest -e 'rmarkdown::render("analysis/model_RF_process_check_sample.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [process_ab_time, process_Rmatching]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/model_RF_process_check_sample.html

# # # # # check

# # # #   process_filter_ab: # filter ab users
# # # #     run: r:latest -e 'rmarkdown::render("analysis/process_filter_ab.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
# # # #     needs: [process_Rmatching]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/process_filter_ab.html
# # # #       highly_sensitive: 
# # # #         csv: output/matched_patients_id_ab.csv

# # # #   extract_variables_ab_yr1: 
# # # #     run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_yr1 --with-end-date-fix
# # # #     needs: [process_filter_ab]
# # # #     outputs:
# # # #       highly_sensitive:
# # # #         cohort: output/input_ab_yr1.csv

# # # #   extract_variables_ab_yr2: 
# # # #     run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_yr2 --with-end-date-fix
# # # #     needs: [process_filter_ab]
# # # #     outputs:
# # # #       highly_sensitive:
# # # #         cohort: output/input_ab_yr2.csv

# # # #   extract_variables_ab_yr3: 
# # # #     run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_yr3 --with-end-date-fix
# # # #     needs: [process_filter_ab]
# # # #     outputs:
# # # #       highly_sensitive:
# # # #         cohort: output/input_ab_yr3.csv

# # # #   extract_variables_ab_yr3_15d: 
# # # #     run: cohortextractor:latest generate_cohort --study-definition study_definition_ab_yr3_15d --with-end-date-fix
# # # #     needs: [process_filter_ab]
# # # #     outputs:
# # # #       highly_sensitive:
# # # #         cohort: output/input_ab_yr3_15d.csv


# # # #   process_merge_ab: # merge 1-2-3 year ab 
# # # #     run: r:latest -e 'rmarkdown::render("analysis/process_merge_ab.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
# # # #     needs: [process_Rmatching,extract_variables_ab_yr3_15d, extract_variables_ab_yr3,extract_variables_ab_yr2,extract_variables_ab_yr1]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/process_merge_ab.html
# # # #       highly_sensitive: 
# # # #         rds: output/matched_patients_monthly_ab.rds

# # # #   check_ab_yr1:
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_ab_yr1.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
# # # #     needs: [extract_variables_ab_yr1,matching,process_Rmatching]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_ab_yr1.html

# # # #   check_ab_yr3:
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_ab_yr3.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
# # # #     needs: [process_Rmatching]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_ab_yr3.html
 
# # # #   check_abtype:
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_abtype.Rmd", knit_root_dir = "/workspace", output_dir="/workspace/output")'
# # # #     needs: [process_Rmatching]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_abtype.html

# # # #   check_process_1: 
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_process_1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [generate_study_population_covid_primarycare,generate_study_population_covid_SGSS,generate_study_population_covid_admission]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_process_1.html

# # # #   # check_RF: 
# # # #   #   run: r:latest -e 'rmarkdown::render("analysis/check_RF.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #   #   needs: [process_Rmatching]
# # # #   #   outputs:
# # # #   #     moderately_sensitive:
# # # #   #       html: output/check_RF.html
  
# # # #   # check_RF_grid: 
# # # #   #   run: r:latest -e 'rmarkdown::render("analysis/check_RF_grid.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #   #   needs: [process_Rmatching]
# # # #   #   outputs:
# # # #   #     moderately_sensitive:
# # # #   #       html: output/check_RF_grid.html
  
# # # #   check_RF_yr1: 
# # # #     run: r:latest -e 'rmarkdown::render("analysis/check_RF_yr1.Rmd", knit_root_dir = "/workspace", output_dir = "output")'
# # # #     needs: [extract_variables_ab_yr1,matching,process_Rmatching]
# # # #     outputs:
# # # #       moderately_sensitive:
# # # #         html: output/check_RF_yr1.html

